/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.checkerWeb.checker.checkerBase.sablecc.java_lexer;

import java.io.*;
import com.checkerWeb.checker.checkerBase.sablecc.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private IPushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") final PushbackReader in)
    {
        this.in = new IPushbackReader() {

            private PushbackReader pushbackReader = in;
            
            @Override
            public void unread(int c) throws IOException {
                pushbackReader.unread(c);
            }
            
            @Override
            public int read() throws IOException {
                return pushbackReader.read();
            }
        };
    }
 
    public Lexer(@SuppressWarnings("hiding") IPushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        // int middle = (low + high) / 2;
                        int middle = (low + high) >>> 1;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            new InvalidToken(this.text.substring(0, 1), start_line + 1, start_pos + 1),
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTraditionalComment(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDocumentationComment(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEndOfLineComment(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBrace(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBrace(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLParen(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRParen(line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDataType(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNumericConstant(text, line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTextLiteral(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeyword(text, line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new13(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUnknown(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 33, 7}, {34, 34, 8}, {35, 35, 9}, {36, 36, 1}, {37, 37, 10}, {38, 38, 11}, {39, 39, 12}, {40, 40, 13}, {41, 41, 14}, {42, 42, 15}, {43, 43, 16}, {44, 44, 17}, {45, 45, 18}, {46, 46, 19}, {47, 47, 20}, {48, 48, 21}, {49, 57, 22}, {58, 58, 23}, {59, 59, 24}, {60, 60, 25}, {61, 61, 26}, {62, 62, 27}, {63, 63, 28}, {64, 64, 1}, {65, 75, 29}, {76, 76, 30}, {77, 82, 29}, {83, 83, 31}, {84, 90, 29}, {91, 93, 1}, {94, 94, 32}, {95, 95, 33}, {96, 96, 1}, {97, 97, 34}, {98, 98, 35}, {99, 99, 36}, {100, 100, 37}, {101, 101, 38}, {102, 102, 39}, {103, 103, 40}, {104, 104, 41}, {105, 105, 42}, {106, 107, 41}, {108, 108, 43}, {109, 109, 41}, {110, 110, 44}, {111, 111, 41}, {112, 112, 45}, {113, 113, 41}, {114, 114, 46}, {115, 115, 47}, {116, 116, 48}, {117, 117, 41}, {118, 118, 49}, {119, 119, 50}, {120, 122, 41}, {123, 123, 51}, {124, 124, 52}, {125, 125, 53}, {126, 126, 54}, {127, 65535, 1}, },
            {},
            {{9, 9, 55}, {10, 10, 56}, {12, 12, 57}, {13, 13, 58}, {32, 32, 59}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 9, 55}, {10, 10, 60}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{61, 61, 61}, },
            {{0, 9, 62}, {11, 12, 62}, {14, 33, 62}, {34, 34, 63}, {35, 91, 62}, {92, 92, 64}, {93, 255, 62}, },
            {{100, 100, 65}, {101, 101, 66}, {105, 105, 67}, {112, 112, 68}, },
            {{61, 61, 69}, },
            {{38, 38, 70}, },
            {{0, 9, 71}, {11, 12, 71}, {14, 38, 71}, {40, 91, 71}, {92, 92, 72}, {93, 255, 71}, },
            {},
            {},
            {{61, 61, 73}, },
            {{43, 43, 74}, {61, 61, 75}, },
            {},
            {{45, 45, 76}, {61, 61, 77}, },
            {{48, 57, 78}, },
            {{42, 42, 79}, {47, 47, 80}, {61, 61, 81}, },
            {{46, 46, 82}, {48, 55, 83}, {56, 57, 84}, {68, 68, 85}, {69, 69, 86}, {88, 88, 87}, {100, 100, 88}, {101, 101, 89}, {120, 120, 90}, },
            {{46, 46, 82}, {48, 57, 91}, {68, 69, -23}, {100, 101, -23}, },
            {},
            {},
            {{60, 60, 92}, {61, 61, 93}, },
            {{61, 61, 94}, },
            {{61, 61, 95}, {62, 62, 96}, },
            {{58, 58, 97}, },
            {{48, 57, 98}, {65, 90, 99}, {95, 95, 100}, {97, 122, 101}, },
            {{34, 34, 102}, {39, 39, 103}, {48, 122, -31}, },
            {{48, 95, -31}, {97, 115, 101}, {116, 116, 104}, {117, 122, 101}, },
            {{61, 61, 105}, },
            {{48, 122, -31}, },
            {{48, 95, -31}, {97, 97, 101}, {98, 98, 106}, {99, 114, 101}, {115, 115, 107}, {116, 122, 101}, },
            {{48, 95, -31}, {97, 110, 101}, {111, 111, 108}, {112, 113, 101}, {114, 114, 109}, {115, 120, 101}, {121, 121, 110}, {122, 122, 101}, },
            {{48, 95, -31}, {97, 97, 111}, {98, 103, 101}, {104, 104, 112}, {105, 107, 101}, {108, 108, 113}, {109, 110, 101}, {111, 111, 114}, {112, 122, 101}, },
            {{48, 95, -31}, {97, 100, 101}, {101, 101, 115}, {102, 110, 101}, {111, 111, 116}, {112, 122, 101}, },
            {{48, 95, -31}, {97, 107, 101}, {108, 108, 117}, {109, 109, 101}, {110, 110, 118}, {111, 119, 101}, {120, 120, 119}, {121, 122, 101}, },
            {{48, 95, -31}, {97, 104, 101}, {105, 105, 120}, {106, 107, 101}, {108, 108, 121}, {109, 110, 101}, {111, 111, 122}, {112, 122, 101}, },
            {{48, 110, -37}, {111, 111, 123}, {112, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 95, -31}, {97, 101, 101}, {102, 102, 124}, {103, 108, 101}, {109, 109, 125}, {110, 110, 126}, {111, 122, 101}, },
            {{48, 110, -37}, {111, 111, 127}, {112, 122, 101}, },
            {{48, 95, -31}, {97, 97, 128}, {98, 100, 101}, {101, 101, 129}, {102, 122, 101}, },
            {{48, 95, -31}, {97, 97, 130}, {98, 113, 101}, {114, 114, 131}, {115, 116, 101}, {117, 117, 132}, {118, 122, 101}, },
            {{48, 100, -39}, {101, 101, 133}, {102, 122, 101}, },
            {{48, 95, -31}, {97, 103, 101}, {104, 104, 134}, {105, 115, 101}, {116, 116, 135}, {117, 117, 136}, {118, 118, 101}, {119, 119, 137}, {120, 120, 101}, {121, 121, 138}, {122, 122, 101}, },
            {{48, 103, -49}, {104, 104, 139}, {105, 113, 101}, {114, 114, 140}, {115, 122, 101}, },
            {{48, 110, -37}, {111, 111, 141}, {112, 122, 101}, },
            {{48, 103, -49}, {104, 104, 142}, {105, 122, 101}, },
            {},
            {{61, 61, 143}, {124, 124, 144}, },
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -7}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {{0, 255, -10}, },
            {},
            {{34, 34, 145}, {39, 39, 146}, {48, 55, 147}, {85, 85, 148}, {88, 88, 149}, {92, 92, 150}, {97, 97, 151}, {98, 98, 152}, {102, 102, 153}, {110, 110, 154}, {114, 114, 155}, {116, 116, 156}, {117, 117, 157}, {118, 118, 158}, {120, 120, 159}, },
            {{101, 101, 160}, },
            {{110, 110, 161}, },
            {{102, 102, 162}, {110, 110, 163}, },
            {{114, 114, 164}, },
            {},
            {},
            {{39, 39, 165}, },
            {{34, 34, 166}, {39, 39, 167}, {48, 55, 168}, {85, 85, 169}, {88, 88, 170}, {92, 92, 171}, {97, 97, 172}, {98, 98, 173}, {102, 102, 174}, {110, 110, 175}, {114, 114, 176}, {116, 116, 177}, {117, 117, 178}, {118, 118, 179}, {120, 120, 180}, },
            {},
            {},
            {},
            {},
            {},
            {{48, 57, 78}, {68, 68, 181}, {69, 69, 182}, {100, 100, 183}, {101, 101, 184}, },
            {{0, 9, 185}, {10, 10, 186}, {11, 12, 185}, {13, 13, 187}, {14, 41, 185}, {42, 42, 188}, {43, 255, 185}, },
            {{0, 9, 189}, {10, 10, 190}, {11, 12, 189}, {13, 13, 191}, {14, 255, 189}, },
            {},
            {{48, 57, 192}, {68, 68, 193}, {69, 69, 194}, {100, 100, 195}, {101, 101, 196}, },
            {{46, 69, -23}, {100, 101, -23}, },
            {{46, 46, 82}, {48, 57, 84}, {68, 101, -24}, },
            {},
            {{43, 43, 197}, {45, 45, 198}, {48, 57, 199}, },
            {{48, 57, 200}, {65, 70, 201}, {97, 102, 202}, },
            {},
            {{43, 57, -88}, },
            {{48, 102, -89}, },
            {{46, 101, -24}, },
            {{61, 61, 203}, },
            {},
            {},
            {},
            {{61, 61, 204}, {62, 62, 205}, },
            {},
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{0, 9, 206}, {11, 12, 206}, {14, 33, 206}, {34, 34, 207}, {35, 91, 206}, {92, 92, 208}, {93, 65535, 206}, },
            {{0, 9, 209}, {11, 12, 209}, {14, 38, 209}, {40, 91, 209}, {92, 92, 210}, {93, 65535, 209}, },
            {{48, 95, -31}, {97, 113, 101}, {114, 114, 211}, {115, 122, 101}, },
            {},
            {{48, 95, -31}, {97, 114, 101}, {115, 115, 212}, {116, 122, 101}, },
            {{48, 114, -108}, {115, 115, 213}, {116, 122, 101}, },
            {{48, 110, -37}, {111, 111, 214}, {112, 122, 101}, },
            {{48, 100, -39}, {101, 101, 215}, {102, 122, 101}, },
            {{48, 115, -33}, {116, 116, 216}, {117, 122, 101}, },
            {{48, 114, -108}, {115, 115, 217}, {116, 116, 218}, {117, 122, 101}, },
            {{48, 95, -31}, {97, 97, 219}, {98, 122, 101}, },
            {{48, 95, -31}, {97, 97, 220}, {98, 122, 101}, },
            {{48, 95, -31}, {97, 109, 101}, {110, 110, 221}, {111, 122, 101}, },
            {{48, 101, -44}, {102, 102, 222}, {103, 122, 101}, },
            {{48, 95, -31}, {97, 116, 101}, {117, 117, 223}, {118, 122, 101}, },
            {{48, 114, -108}, {115, 115, 224}, {116, 122, 101}, },
            {{48, 116, -118}, {117, 117, 225}, {118, 122, 101}, },
            {{48, 115, -33}, {116, 116, 226}, {117, 122, 101}, },
            {{48, 109, -116}, {110, 110, 227}, {111, 122, 101}, },
            {{48, 110, -37}, {111, 111, 228}, {112, 122, 101}, },
            {{48, 113, -106}, {114, 114, 229}, {115, 122, 101}, },
            {{48, 115, -33}, {116, 116, 230}, {117, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 95, -31}, {97, 111, 101}, {112, 112, 231}, {113, 122, 101}, },
            {{48, 114, -108}, {115, 115, 232}, {116, 116, 233}, {117, 122, 101}, },
            {{48, 109, -116}, {110, 110, 234}, {111, 122, 101}, },
            {{48, 115, -33}, {116, 116, 235}, {117, 122, 101}, },
            {{48, 95, -31}, {97, 118, 101}, {119, 119, 236}, {120, 122, 101}, },
            {{48, 95, -31}, {97, 98, 101}, {99, 99, 237}, {100, 122, 101}, },
            {{48, 104, -41}, {105, 105, 238}, {106, 110, 101}, {111, 111, 239}, {112, 122, 101}, },
            {{48, 97, -36}, {98, 98, 240}, {99, 122, 101}, },
            {{48, 115, -33}, {116, 116, 241}, {117, 122, 101}, },
            {{48, 110, -37}, {111, 111, 242}, {112, 122, 101}, },
            {{48, 95, -31}, {97, 97, 243}, {98, 113, 101}, {114, 114, 244}, {115, 122, 101}, },
            {{48, 111, -127}, {112, 112, 245}, {113, 122, 101}, },
            {{48, 104, -41}, {105, 105, 246}, {106, 122, 101}, },
            {{48, 109, -116}, {110, 110, 247}, {111, 122, 101}, },
            {{48, 104, -41}, {105, 105, 248}, {106, 113, 101}, {114, 114, 249}, {115, 122, 101}, },
            {{48, 95, -31}, {97, 97, 250}, {98, 120, 101}, {121, 121, 251}, {122, 122, 101}, },
            {{48, 104, -41}, {105, 105, 252}, {106, 107, 101}, {108, 108, 253}, {109, 122, 101}, },
            {{48, 104, -41}, {105, 105, 254}, {106, 122, 101}, },
            {},
            {},
            {{0, 255, -10}, },
            {{0, 255, -10}, },
            {{0, 34, -10}, {35, 47, 62}, {48, 55, 255}, {56, 91, 62}, {92, 255, -10}, },
            {{48, 57, 256}, {65, 70, 257}, {97, 102, 258}, },
            {{48, 57, 259}, {65, 70, 260}, {97, 102, 261}, },
            {{0, 255, -10}, },
            {{0, 255, -10}, },
            {{0, 255, -10}, },
            {{0, 255, -10}, },
            {{0, 255, -10}, },
            {{0, 255, -10}, },
            {{0, 255, -10}, },
            {{48, 102, -150}, },
            {{0, 255, -10}, },
            {{48, 102, -151}, },
            {{102, 102, 262}, },
            {{100, 100, 263}, },
            {{110, 110, 264}, },
            {{99, 99, 265}, },
            {{97, 97, 266}, },
            {},
            {{39, 39, 165}, },
            {{39, 39, 165}, },
            {{39, 39, 165}, {48, 55, 267}, },
            {{48, 57, 268}, {65, 70, 269}, {97, 102, 270}, },
            {{48, 57, 271}, {65, 70, 272}, {97, 102, 273}, },
            {{39, 39, 165}, },
            {{39, 39, 165}, },
            {{39, 39, 165}, },
            {{39, 39, 165}, },
            {{39, 39, 165}, },
            {{39, 39, 165}, },
            {{39, 39, 165}, },
            {{48, 102, -171}, },
            {{39, 39, 165}, },
            {{48, 102, -172}, },
            {},
            {{43, 43, 274}, {45, 45, 275}, {48, 57, 276}, },
            {},
            {{43, 57, -184}, },
            {{0, 41, -81}, {42, 42, 277}, {43, 255, 185}, },
            {{0, 255, -187}, },
            {{0, 9, 185}, {10, 10, 278}, {11, 255, -187}, },
            {{0, 9, 279}, {10, 10, 280}, {11, 12, 279}, {13, 13, 281}, {14, 41, 279}, {42, 42, 282}, {43, 46, 279}, {47, 47, 283}, {48, 255, 279}, },
            {{0, 255, -82}, },
            {},
            {{10, 10, 284}, },
            {{48, 101, -84}, },
            {},
            {{43, 43, 285}, {45, 45, 286}, {48, 57, 287}, },
            {},
            {{43, 57, -196}, },
            {{48, 57, 199}, },
            {{48, 57, 199}, },
            {{48, 57, 199}, },
            {{48, 102, -89}, },
            {{48, 102, -89}, },
            {{48, 102, -89}, },
            {},
            {},
            {{61, 61, 288}, },
            {{0, 65535, -104}, },
            {},
            {{34, 34, 289}, {39, 39, 290}, {48, 55, 291}, {85, 85, 292}, {88, 88, 293}, {92, 92, 294}, {97, 97, 295}, {98, 98, 296}, {102, 102, 297}, {110, 110, 298}, {114, 114, 299}, {116, 116, 300}, {117, 117, 301}, {118, 118, 302}, {120, 120, 303}, },
            {{39, 39, 304}, },
            {{34, 34, 305}, {39, 39, 306}, {48, 55, 307}, {85, 85, 308}, {88, 88, 309}, {92, 92, 310}, {97, 97, 311}, {98, 98, 312}, {102, 102, 313}, {110, 110, 314}, {114, 114, 315}, {116, 116, 316}, {117, 117, 317}, {118, 118, 318}, {120, 120, 319}, },
            {{48, 104, -41}, {105, 105, 320}, {106, 122, 101}, },
            {{48, 115, -33}, {116, 116, 321}, {117, 122, 101}, },
            {{48, 100, -39}, {101, 101, 322}, {102, 122, 101}, },
            {{48, 107, -40}, {108, 108, 323}, {109, 122, 101}, },
            {{48, 95, -31}, {97, 97, 324}, {98, 122, 101}, },
            {{48, 100, -39}, {101, 101, 325}, {102, 122, 101}, },
            {{48, 100, -39}, {101, 101, 326}, {102, 122, 101}, },
            {{48, 98, -132}, {99, 99, 327}, {100, 122, 101}, },
            {{48, 113, -106}, {114, 114, 328}, {115, 122, 101}, },
            {{48, 114, -108}, {115, 115, 329}, {116, 122, 101}, },
            {{48, 114, -108}, {115, 115, 330}, {116, 116, 331}, {117, 122, 101}, },
            {{48, 95, -31}, {97, 97, 332}, {98, 122, 101}, },
            {{48, 97, -36}, {98, 98, 333}, {99, 122, 101}, },
            {{48, 100, -39}, {101, 101, 334}, {102, 122, 101}, },
            {{48, 95, -31}, {97, 108, 101}, {109, 109, 335}, {110, 122, 101}, },
            {{48, 100, -39}, {101, 101, 336}, {102, 122, 101}, },
            {{48, 95, -31}, {97, 97, 337}, {98, 122, 101}, },
            {{48, 95, -31}, {97, 97, 338}, {98, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 110, -37}, {111, 111, 339}, {112, 122, 101}, },
            {{48, 107, -40}, {108, 108, 340}, {109, 110, 101}, {111, 111, 341}, {112, 122, 101}, },
            {{48, 115, -33}, {116, 116, 342}, {117, 122, 101}, },
            {{48, 100, -39}, {101, 101, 343}, {102, 122, 101}, },
            {{48, 95, -31}, {97, 102, 101}, {103, 103, 344}, {104, 122, 101}, },
            {{48, 104, -41}, {105, 105, 345}, {106, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 95, -31}, {97, 106, 101}, {107, 107, 346}, {108, 122, 101}, },
            {{48, 95, -31}, {97, 117, 101}, {118, 118, 347}, {119, 122, 101}, },
            {{48, 115, -33}, {116, 116, 348}, {117, 122, 101}, },
            {{48, 107, -40}, {108, 108, 349}, {109, 122, 101}, },
            {{48, 116, -118}, {117, 117, 350}, {118, 122, 101}, },
            {{48, 113, -106}, {114, 114, 351}, {115, 122, 101}, },
            {{48, 115, -33}, {116, 116, 352}, {117, 122, 101}, },
            {{48, 104, -41}, {105, 105, 353}, {106, 122, 101}, },
            {{48, 100, -39}, {101, 101, 354}, {102, 122, 101}, },
            {{48, 115, -33}, {116, 116, 355}, {117, 122, 101}, },
            {{48, 98, -132}, {99, 99, 356}, {100, 122, 101}, },
            {{48, 114, -108}, {115, 115, 357}, {116, 122, 101}, },
            {{48, 110, -37}, {111, 111, 358}, {112, 122, 101}, },
            {{48, 109, -116}, {110, 110, 359}, {111, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 95, -31}, {97, 99, 101}, {100, 100, 360}, {101, 122, 101}, },
            {{48, 95, -31}, {97, 97, 361}, {98, 122, 101}, },
            {{48, 107, -40}, {108, 108, 362}, {109, 122, 101}, },
            {{0, 47, -149}, {48, 55, 363}, {56, 255, -149}, },
            {{0, 47, -149}, {48, 57, 364}, {58, 64, 62}, {65, 70, 365}, {71, 91, 62}, {92, 92, 64}, {93, 96, 62}, {97, 102, 366}, {103, 255, 62}, },
            {{0, 255, -258}, },
            {{0, 255, -258}, },
            {{0, 47, -149}, {48, 57, 367}, {58, 64, 62}, {65, 70, 368}, {71, 96, -258}, {97, 102, 369}, {103, 255, 62}, },
            {{0, 255, -261}, },
            {{0, 255, -261}, },
            {{105, 105, 370}, },
            {{105, 105, 371}, },
            {{100, 100, 372}, },
            {{108, 108, 373}, },
            {{103, 103, 374}, },
            {{39, 39, 165}, {48, 55, 375}, },
            {{39, 39, 165}, {48, 57, 376}, {65, 70, 377}, {97, 102, 378}, },
            {{39, 102, -270}, },
            {{39, 102, -270}, },
            {{39, 39, 165}, {48, 57, 379}, {65, 70, 380}, {97, 102, 381}, },
            {{39, 102, -273}, },
            {{39, 102, -273}, },
            {{48, 57, 276}, },
            {{48, 57, 276}, },
            {{48, 57, 276}, },
            {{0, 9, 382}, {10, 10, 383}, {11, 12, 382}, {13, 13, 384}, {14, 41, 382}, {42, 42, 277}, {43, 46, 382}, {47, 47, 385}, {48, 255, 382}, },
            {{0, 255, -187}, },
            {{0, 9, 386}, {10, 10, 387}, {11, 12, 386}, {13, 13, 388}, {14, 41, 386}, {42, 42, 389}, {43, 255, 386}, },
            {{0, 255, -281}, },
            {{0, 9, 386}, {10, 10, 390}, {11, 255, -281}, },
            {{0, 255, -190}, },
            {},
            {},
            {{48, 57, 287}, },
            {{48, 57, 287}, },
            {{48, 57, 287}, },
            {},
            {{0, 65535, -104}, },
            {{0, 65535, -104}, },
            {{0, 34, -104}, {35, 47, 206}, {48, 55, 391}, {56, 91, 206}, {92, 65535, -104}, },
            {{48, 57, 392}, {65, 70, 393}, {97, 102, 394}, },
            {{48, 57, 395}, {65, 70, 396}, {97, 102, 397}, },
            {{0, 65535, -104}, },
            {{0, 65535, -104}, },
            {{0, 65535, -104}, },
            {{0, 65535, -104}, },
            {{0, 65535, -104}, },
            {{0, 65535, -104}, },
            {{0, 65535, -104}, },
            {{48, 102, -294}, },
            {{0, 65535, -104}, },
            {{48, 102, -295}, },
            {},
            {{39, 39, 304}, },
            {{39, 39, 304}, },
            {{39, 39, 304}, {48, 55, 398}, },
            {{48, 57, 399}, {65, 70, 400}, {97, 102, 401}, },
            {{48, 57, 402}, {65, 70, 403}, {97, 102, 404}, },
            {{39, 39, 304}, },
            {{39, 39, 304}, },
            {{39, 39, 304}, },
            {{39, 39, 304}, },
            {{39, 39, 304}, },
            {{39, 39, 304}, },
            {{39, 39, 304}, },
            {{48, 102, -310}, },
            {{39, 39, 304}, },
            {{48, 102, -311}, },
            {{48, 109, -116}, {110, 110, 405}, {111, 122, 101}, },
            {{48, 113, -106}, {114, 114, 406}, {115, 122, 101}, },
            {{48, 113, -106}, {114, 114, 407}, {115, 122, 101}, },
            {{48, 100, -39}, {101, 101, 408}, {102, 122, 101}, },
            {{48, 106, -239}, {107, 107, 409}, {108, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 103, -49}, {104, 104, 410}, {105, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 114, -108}, {115, 115, 411}, {116, 122, 101}, },
            {{48, 115, -33}, {116, 116, 412}, {117, 122, 101}, },
            {{48, 104, -41}, {105, 105, 413}, {106, 122, 101}, },
            {{48, 116, -118}, {117, 117, 414}, {118, 122, 101}, },
            {{48, 107, -40}, {108, 108, 415}, {109, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 109, -116}, {110, 110, 416}, {111, 122, 101}, },
            {{48, 107, -40}, {108, 108, 417}, {109, 122, 101}, },
            {{48, 115, -33}, {116, 116, 418}, {117, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 100, -39}, {101, 101, 419}, {102, 122, 101}, },
            {{48, 113, -106}, {114, 114, 420}, {115, 122, 101}, },
            {{48, 95, -31}, {97, 97, 421}, {98, 122, 101}, },
            {{48, 113, -106}, {114, 114, 422}, {115, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 117, -240}, {118, 118, 423}, {119, 122, 101}, },
            {{48, 95, -31}, {97, 97, 424}, {98, 122, 101}, },
            {{48, 95, -31}, {97, 97, 425}, {98, 122, 101}, },
            {{48, 100, -39}, {101, 101, 426}, {102, 122, 101}, },
            {{48, 104, -41}, {105, 105, 427}, {106, 122, 101}, },
            {{48, 113, -106}, {114, 114, 428}, {115, 122, 101}, },
            {{48, 115, -33}, {116, 116, 429}, {117, 122, 101}, },
            {{48, 104, -41}, {105, 105, 430}, {106, 122, 101}, },
            {{48, 98, -132}, {99, 99, 431}, {100, 122, 101}, },
            {{48, 113, -106}, {114, 114, 432}, {115, 122, 101}, },
            {{48, 98, -132}, {99, 99, 433}, {100, 122, 101}, },
            {{48, 103, -49}, {104, 104, 434}, {105, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 118, -131}, {119, 119, 435}, {120, 122, 101}, },
            {{48, 114, -108}, {115, 115, 436}, {116, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 115, -33}, {116, 116, 437}, {117, 122, 101}, },
            {{48, 100, -39}, {101, 101, 438}, {102, 122, 101}, },
            {{0, 255, -10}, },
            {{0, 47, -149}, {48, 57, 439}, {58, 64, 62}, {65, 70, 440}, {71, 96, -258}, {97, 102, 441}, {103, 255, 62}, },
            {{0, 255, -366}, },
            {{0, 255, -366}, },
            {{0, 255, -10}, },
            {{0, 255, -10}, },
            {{0, 255, -10}, },
            {{110, 110, 442}, },
            {{102, 102, 443}, },
            {{101, 101, 444}, },
            {{117, 117, 445}, },
            {{109, 109, 446}, },
            {{39, 39, 165}, },
            {{39, 39, 165}, {48, 57, 447}, {65, 70, 448}, {97, 102, 449}, },
            {{39, 102, -378}, },
            {{39, 102, -378}, },
            {{39, 39, 165}, },
            {{39, 39, 165}, },
            {{39, 39, 165}, },
            {{0, 9, 450}, {10, 10, 451}, {11, 12, 450}, {13, 13, 452}, {14, 41, 450}, {42, 42, 453}, {43, 255, 450}, },
            {{0, 255, -384}, },
            {{0, 9, 450}, {10, 10, 454}, {11, 255, -384}, },
            {},
            {{0, 255, -281}, },
            {{0, 255, -281}, },
            {{0, 9, 386}, {10, 10, 455}, {11, 255, -281}, },
            {{0, 41, -190}, {42, 42, 389}, {43, 255, -190}, },
            {{0, 255, -281}, },
            {{0, 47, -293}, {48, 55, 456}, {56, 65535, -293}, },
            {{0, 47, -293}, {48, 57, 457}, {58, 64, 206}, {65, 70, 458}, {71, 91, 206}, {92, 92, 208}, {93, 96, 206}, {97, 102, 459}, {103, 65535, 206}, },
            {{0, 65535, -394}, },
            {{0, 65535, -394}, },
            {{0, 47, -293}, {48, 57, 460}, {58, 64, 206}, {65, 70, 461}, {71, 96, -394}, {97, 102, 462}, {103, 65535, 206}, },
            {{0, 65535, -397}, },
            {{0, 65535, -397}, },
            {{39, 39, 304}, {48, 55, 463}, },
            {{39, 39, 304}, {48, 57, 464}, {65, 70, 465}, {97, 102, 466}, },
            {{39, 102, -401}, },
            {{39, 102, -401}, },
            {{39, 39, 304}, {48, 57, 467}, {65, 70, 468}, {97, 102, 469}, },
            {{39, 102, -404}, },
            {{39, 102, -404}, },
            {{48, 102, -236}, {103, 103, 470}, {104, 122, 101}, },
            {{48, 95, -31}, {97, 97, 471}, {98, 122, 101}, },
            {{48, 115, -33}, {116, 116, 472}, {117, 122, 101}, },
            {{48, 95, -31}, {97, 97, 473}, {98, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 109, -116}, {110, 110, 474}, {111, 122, 101}, },
            {{48, 107, -40}, {108, 108, 475}, {109, 122, 101}, },
            {{48, 100, -39}, {101, 101, 476}, {102, 122, 101}, },
            {{48, 99, -254}, {100, 100, 477}, {101, 122, 101}, },
            {{48, 107, -40}, {108, 108, 478}, {109, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 108, -227}, {109, 109, 479}, {110, 122, 101}, },
            {{48, 115, -33}, {116, 116, 480}, {117, 122, 101}, },
            {{48, 109, -116}, {110, 110, 481}, {111, 122, 101}, },
            {{48, 101, -44}, {102, 102, 482}, {103, 122, 101}, },
            {{48, 100, -39}, {101, 101, 483}, {102, 122, 101}, },
            {{48, 102, -236}, {103, 103, 484}, {104, 122, 101}, },
            {{48, 115, -33}, {116, 116, 485}, {117, 122, 101}, },
            {{48, 98, -132}, {99, 99, 486}, {100, 122, 101}, },
            {{48, 98, -132}, {99, 99, 487}, {100, 122, 101}, },
            {{48, 109, -116}, {110, 110, 488}, {111, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 98, -132}, {99, 99, 489}, {100, 122, 101}, },
            {{48, 115, -33}, {116, 116, 490}, {117, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 103, -49}, {104, 104, 491}, {105, 122, 101}, },
            {{48, 113, -106}, {114, 114, 492}, {115, 122, 101}, },
            {{48, 114, -108}, {115, 115, 493}, {116, 122, 101}, },
            {{48, 104, -41}, {105, 105, 494}, {106, 122, 101}, },
            {{48, 104, -41}, {105, 105, 495}, {106, 122, 101}, },
            {{48, 122, -31}, },
            {{0, 47, -149}, {48, 57, 496}, {58, 64, 62}, {65, 70, 497}, {71, 96, -258}, {97, 102, 498}, {103, 255, 62}, },
            {{0, 255, -441}, },
            {{0, 255, -441}, },
            {{101, 101, 499}, },
            {{0, 9, 500}, {10, 10, 501}, {11, 12, 500}, {13, 13, 502}, {14, 255, 500}, },
            {{102, 102, 503}, },
            {{100, 100, 504}, },
            {{97, 97, 505}, },
            {{39, 39, 165}, {48, 57, 506}, {65, 70, 507}, {97, 102, 508}, },
            {{39, 102, -449}, },
            {{39, 102, -449}, },
            {{0, 255, -384}, },
            {{0, 255, -384}, },
            {{0, 9, 450}, {10, 10, 509}, {11, 255, -384}, },
            {{0, 41, -279}, {42, 42, 453}, {43, 255, -279}, },
            {{0, 255, -384}, },
            {{0, 255, -281}, },
            {{0, 65535, -104}, },
            {{0, 47, -293}, {48, 57, 510}, {58, 64, 206}, {65, 70, 511}, {71, 96, -394}, {97, 102, 512}, {103, 65535, 206}, },
            {{0, 65535, -459}, },
            {{0, 65535, -459}, },
            {{0, 65535, -104}, },
            {{0, 65535, -104}, },
            {{0, 65535, -104}, },
            {{39, 39, 304}, },
            {{39, 39, 304}, {48, 57, 513}, {65, 70, 514}, {97, 102, 515}, },
            {{39, 102, -466}, },
            {{39, 102, -466}, },
            {{39, 39, 304}, },
            {{39, 39, 304}, },
            {{39, 39, 304}, },
            {{48, 122, -31}, },
            {{48, 98, -132}, {99, 99, 516}, {100, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 109, -116}, {110, 110, 517}, {111, 122, 101}, },
            {{48, 116, -118}, {117, 117, 518}, {118, 122, 101}, },
            {{48, 115, -33}, {116, 116, 519}, {117, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 114, -108}, {115, 115, 520}, {116, 122, 101}, },
            {{48, 95, -31}, {97, 120, 101}, {121, 121, 521}, {122, 122, 101}, },
            {{48, 100, -39}, {101, 101, 522}, {102, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 98, -132}, {99, 99, 523}, {100, 122, 101}, },
            {{48, 95, -31}, {97, 97, 524}, {98, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 100, -39}, {101, 101, 525}, {102, 122, 101}, },
            {{48, 100, -39}, {101, 101, 526}, {102, 122, 101}, },
            {{48, 115, -33}, {116, 116, 527}, {117, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 101, -44}, {102, 102, 528}, {103, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 110, -37}, {111, 111, 529}, {112, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 100, -39}, {101, 101, 530}, {102, 122, 101}, },
            {{48, 107, -40}, {108, 108, 531}, {109, 122, 101}, },
            {{0, 255, -10}, },
            {{0, 255, -10}, },
            {{0, 255, -10}, },
            {{0, 255, -445}, },
            {{0, 255, -445}, },
            {},
            {{10, 10, 532}, },
            {{0, 255, -445}, },
            {{101, 101, 533}, },
            {{0, 255, -445}, },
            {{39, 39, 165}, },
            {{39, 39, 165}, },
            {{39, 39, 165}, },
            {{0, 255, -384}, },
            {{0, 47, -293}, {48, 57, 534}, {58, 64, 206}, {65, 70, 535}, {71, 96, -394}, {97, 102, 536}, {103, 65535, 206}, },
            {{0, 65535, -512}, },
            {{0, 65535, -512}, },
            {{39, 39, 304}, {48, 57, 537}, {65, 70, 538}, {97, 102, 539}, },
            {{39, 102, -515}, },
            {{39, 102, -515}, },
            {{48, 115, -33}, {116, 116, 540}, {117, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 100, -39}, {101, 101, 541}, {102, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 109, -116}, {110, 110, 542}, {111, 122, 101}, },
            {{48, 100, -39}, {101, 101, 543}, {102, 122, 101}, },
            {{48, 98, -132}, {99, 99, 544}, {100, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 100, -39}, {101, 101, 545}, {102, 122, 101}, },
            {{48, 111, -127}, {112, 112, 546}, {113, 122, 101}, },
            {{48, 109, -116}, {110, 110, 547}, {111, 122, 101}, },
            {{48, 109, -116}, {110, 110, 548}, {111, 122, 101}, },
            {{48, 100, -39}, {101, 101, 549}, {102, 122, 101}, },
            {},
            {{0, 255, -445}, },
            {{0, 65535, -104}, },
            {{0, 65535, -104}, },
            {{0, 65535, -104}, },
            {{39, 39, 304}, },
            {{39, 39, 304}, },
            {{39, 39, 304}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 115, -33}, {116, 116, 550}, {117, 122, 101}, },
            {{48, 110, -37}, {111, 111, 551}, {112, 122, 101}, },
            {{48, 100, -39}, {101, 101, 552}, {102, 122, 101}, },
            {{48, 99, -254}, {100, 100, 553}, {101, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 104, -41}, {105, 105, 554}, {106, 122, 101}, },
            {{48, 115, -33}, {116, 116, 555}, {117, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 114, -108}, {115, 115, 556}, {116, 122, 101}, },
            {{48, 101, -44}, {102, 102, 557}, {103, 122, 101}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 95, -31}, {97, 121, 101}, {122, 122, 558}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 122, -31}, },
            {{48, 100, -39}, {101, 101, 559}, {102, 122, 101}, },
            {{48, 99, -254}, {100, 100, 560}, {101, 122, 101}, },
            {{48, 122, -31}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {11, 13, 11, 11, 11, 11, 11, 10, 13, 13, 10, 10, 13, 5, 6, 10, 10, 10, 10, 10, 10, 8, 8, 10, 10, 10, 10, 10, 10, 12, 12, 12, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 3, 10, 4, 10, 11, 11, 11, 11, 11, 11, 10, -1, 9, -1, -1, -1, -1, -1, 10, 10, -1, -1, 10, 10, 10, 10, 10, 8, -1, 2, 10, 8, 8, -1, 8, -1, -1, 8, -1, -1, 8, 10, 10, 10, 10, 10, 10, 12, 12, 12, 12, -1, -1, 12, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 8, -1, -1, -1, -1, -1, 2, 2, 2, 8, 8, -1, 8, -1, -1, -1, 8, 8, 8, 8, 10, 10, 10, -1, 9, -1, -1, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 12, 7, 12, 12, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, 12, 12, 12, 7, 10, 12, 7, 12, 12, 12, 12, 12, 10, 10, 12, 12, 12, 10, 12, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 10, 12, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, 12, 12, 10, 10, 10, 10, 12, 12, 12, 12, 10, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 12, 12, 10, 12, 12, 10, 12, 12, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 12, 10, 12, 12, 12, 7, 12, 12, 12, 10, 12, 12, 10, 12, 12, 12, 10, 10, 10, 12, 10, 12, 10, 12, 12, -1, -1, -1, -1, -1, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 7, 12, 10, 10, 10, 12, 12, 12, 10, 10, 12, 12, 12, 12, 12, 10, -1, -1, -1, -1, -1, -1, -1, 10, 10, 12, 12, 12, 12, 10, 12, 12, 10, 12, 12, 10, 10, 12, 10, 10, 10, 12, 12, 10, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));
            	
            InputStream is =   Lexer.class.getResourceAsStream("./lexer.dat");
            System.out.println("num of bytes: " + is.available());
            System.out.println("toString: " + is.toString());
            System.out.println("readBytes: " + is.readNBytes(10));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
        	System.out.println("MESSAGE:------------------" + e.toString());
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
